import {PreparedQuery} from "@pgtyped/runtime"
import {CaseAware} from "./CaseAware"
import {NonVoid} from "./Utils"

/**
 * Generic type of any query module generated by PgTyped
 */
export type AnyPgTypedModule = {
  [queryName: string]: PreparedQuery<any, any>
}

/**
 * Infers the type of query parameters from `PreparedQuery`
 */
export type ParamType<Q> = Q extends PreparedQuery<infer P, any>
  ? P
  : "ParamType<Q ∉ PreparedQuery>"

/**
 * Infers the row type from `PreparedQuery`
 */
type RowType<Q> = Q extends PreparedQuery<any, infer R>
  ? R
  : "RowType<Q ∉ PreparedQuery>"

/**
 *
 */
export type ResultType<Q, IsCamelCase> = RowType<Q> extends void
  ? []
  : CaseAware<RowType<Q>, IsCamelCase>[]

/**
 * Infers the union row type of a query module
 */
export type AnyRowType<QueryModule> = NonVoid<
  RowType<QueryModule[keyof QueryModule]>
>
