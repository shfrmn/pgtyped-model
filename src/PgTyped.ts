import {PreparedQuery} from "@pgtyped/runtime"

/**
 *
 */
type NonVoid<T> = Exclude<T, void>

/**
 * Generic type of any query module generated by PgTyped
 */
export type AnyPgTypedModule = {
  [queryName: string]: PreparedQuery<any, any>
}

/**
 * Infers the type of query parameters
 */
export type ParamType<Q> = Q extends PreparedQuery<infer P, any> ? P : never

/**
 * Infers the database row type
 */
type RowType<Q> = Q extends PreparedQuery<any, infer R> ? R : never

/**
 * Infers the union row type of a query module
 */
export type AnyRowType<QM extends AnyPgTypedModule> = NonVoid<
  RowType<QM[keyof QM]>
>

/**
 * Query result type (inferred based on the row and mapper types)
 */
export type ResultType<Q, T> = T extends ""
  ? NonVoid<RowType<Q>> // Database row type
  : RowType<Q> extends void
  ? void // Query that doesn't return rows (e.g. `DELETE`)
  : T // Mapped row type
